import React from 'react';
import {useForm} from 'react-hook-form';

import styles from './InfoForm.module.css';


const TELEGRAM_BOT_TOKEN = process.env.REACT_APP_TELEGRAM_BOT_TOKEN;
const CHAT_ID = process.env.REACT_APP_TELEGRAM_CHAT_ID;


const InfoForm = () => {
    const {register, handleSubmit, reset, formState: {errors}} = useForm();

    const onSubmit = async (data) => {
        const message = `
      üìã –ù–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:
      - –ü–æ–≤–Ω–µ —ñ–º'—è: ${data.fullName}
      - –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${data.birthYear || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
      - –î–∞—Ç–∞ —Å–º–µ—Ä—Ç—ñ: ${data.deathYear || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
      - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: ${data.info || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
      - –•—Ç–æ –Ω–∞–¥–∞–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é: ${data.person || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
    `;

        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

        try {
            await fetch(url, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    chat_id: CHAT_ID,
                    text: message,
                }),
            });

            alert('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –¥–æ Telegram!');
            reset();
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ:', error);
            alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–∞–Ω—ñ.');
        }
    };

    return (
        <div className={styles.container}>
            <form onSubmit={handleSubmit(onSubmit)} className={styles.form}>
                <div className={styles.field}>
                    <label>–ü–æ–≤–Ω–µ —ñ–º'—è(–Ü–ü–ë):</label>
                    <input
                        type="text"
                        {...register('fullName', {required: '–¶–µ –ø–æ–ª–µ –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ'})}
                        className={errors.fullName && styles.error}
                    />
                    {errors.fullName && <span>{errors.fullName.message}</span>}
                </div>

                <div className={styles.field}>
                    <label>–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:</label>
                    <input type="text"{...register('birthYear')}/>
                </div>

                <div className={styles.field}>
                    <label>–î–∞—Ç–∞ —Å–º–µ—Ä—Ç—ñ (—è–∫—â–æ —î):</label>
                    <input type="text" {...register('deathYear')} />
                </div>

                <div className={styles.field}>
                    <label>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</label>
                    <textarea
                        {...register('info', {maxLength: {value: 5000, message: '–ú–∞–∫—Å–∏–º—É–º 5000 —Å–∏–º–≤–æ–ª—ñ–≤'}})}
                        className={errors.info && styles.error}
                    />
                    {errors.info && <span>{errors.info.message}</span>}
                </div>

                <div className={styles.field}>
                    <label>–•—Ç–æ –Ω–∞–¥–∞–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:</label>
                    <input
                        type="text"
                        {...register('person', {required: '–¶–µ –ø–æ–ª–µ –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ'})}
                        className={errors.fullName && styles.error}
                    />
                    {errors.person && <span>{errors.person.message}</span>}
                </div>

                <button type="submit" className={styles.submitBtn}>–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏</button>
            </form>
        </div>
    );
};

export {InfoForm};
